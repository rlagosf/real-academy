{"ast":null,"code":"import { toHandlers as _toHandlers, mergeProps as _mergeProps, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"input\", _mergeProps({\n    ref: \"input\"\n  }, _ctx.$attrs, _toHandlers(_ctx.$attrs, true)), null, 16);\n}","map":{"version":3,"names":["_createElementBlock","_mergeProps","ref","_ctx","$attrs","_toHandlers"],"sources":["C:\\Users\\DIVDOC-INTERNET\\Desktop\\real-academy\\real-academy-frontend\\node_modules\\@fawmi\\vue-google-maps\\src\\components\\autocomplete.vue"],"sourcesContent":["<template>\r\n  <input ref=\"input\" v-bind=\"$attrs\" v-on=\"$attrs\" />\r\n</template>\r\n\r\n<script>\r\nimport { bindProps, getPropsValues } from '../utils/bindProps.js'\r\nimport downArrowSimulator from '../utils/simulateArrowDown.js'\r\nimport { mappedPropsToVueProps } from './build-component'\r\n\r\nconst mappedProps = {\r\n  bounds: {\r\n    type: Object,\r\n  },\r\n  componentRestrictions: {\r\n    type: Object,\r\n    // Do not bind -- must check for undefined\r\n    // in the property\r\n    noBind: true,\r\n  },\r\n  types: {\r\n    type: Array,\r\n    default: function () {\r\n      return []\r\n    },\r\n  },\r\n}\r\n\r\nconst props = {\r\n  selectFirstOnEnter: {\r\n    required: false,\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  options: {\r\n    type: Object,\r\n  },\r\n}\r\n\r\nexport default {\r\n  mounted() {\r\n    this.$gmapApiPromiseLazy().then(() => {\r\n      if (this.selectFirstOnEnter) {\r\n        downArrowSimulator(this.$refs.input)\r\n      }\r\n\r\n      if (typeof google.maps.places.Autocomplete !== 'function') {\r\n        throw new Error(\r\n          \"google.maps.places.Autocomplete is undefined. Did you add 'places' to libraries when loading Google Maps?\"\r\n        )\r\n      }\r\n\r\n      /* eslint-disable no-unused-vars */\r\n      const finalOptions = {\r\n        ...getPropsValues(this, mappedProps),\r\n        ...this.options,\r\n      }\r\n\r\n      this.$autocomplete = new google.maps.places.Autocomplete(this.$refs.input, finalOptions)\r\n      bindProps(this, this.$autocomplete, mappedProps)\r\n\r\n      this.$watch('componentRestrictions', (v) => {\r\n        if (v !== undefined) {\r\n          this.$autocomplete.setComponentRestrictions(v)\r\n        }\r\n      })\r\n\r\n      // Not using `bindEvents` because we also want\r\n      // to return the result of `getPlace()`\r\n      this.$autocomplete.addListener('place_changed', () => {\r\n        this.$emit('place_changed', this.$autocomplete.getPlace())\r\n      })\r\n    })\r\n  },\r\n  props: {\r\n    ...mappedPropsToVueProps(mappedProps),\r\n    ...props,\r\n  },\r\n}\r\n</script>\r\n"],"mappings":";;uBACEA,mBAAA,CAAmD,SAAnDC,WAAA,CAAmD;IAA5CC,GAAG,EAAC;EAAO,GAASC,IAAA,CAAAC,MAAM,EAAEC,WAAA,CAAaF,IAAP,CAAAC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}