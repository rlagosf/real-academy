{"ast":null,"code":"export default {\n  name: 'VideoBackground',\n  data() {\n    return {\n      videoUrls: [],\n      currentIndex: 0,\n      videoDuration: 10 // Duración en segundos de cada video\n    };\n  },\n  async created() {\n    this.videoUrls = await this.fetchVideoUrls();\n    this.startVideoCycle();\n  },\n  methods: {\n    async fetchVideoUrls() {\n      const totalVideos = 6; // Cambia esto según la cantidad de videos\n      return Array.from({\n        length: totalVideos\n      }, (_, i) => `/assets/videos/video-${i + 1}.mp4`);\n    },\n    startVideoCycle() {\n      setInterval(() => {\n        this.currentIndex = (this.currentIndex + 1) % this.videoUrls.length;\n      }, this.videoDuration * 1000); // Cambia el video cada 10 segundos\n    },\n    onVideoEnded() {\n      // Cuando el video termina, se libera la memoria del video actual\n      const currentVideo = this.$refs.video[this.currentIndex];\n      if (currentVideo) {\n        currentVideo.pause(); // Pausa el video actual\n        currentVideo.currentTime = 0; // Reinicia el tiempo de reproducción\n      }\n    },\n    onVideoLoaded() {\n      // Esta función se ejecuta cuando un video ha terminado de cargar\n      // Puedes implementar aquí lógica adicional si es necesario\n    }\n  }\n};","map":{"version":3,"names":["name","data","videoUrls","currentIndex","videoDuration","created","fetchVideoUrls","startVideoCycle","methods","totalVideos","Array","from","length","_","i","setInterval","onVideoEnded","currentVideo","$refs","video","pause","currentTime","onVideoLoaded"],"sources":["C:\\Users\\DIVDOC-INTERNET\\Desktop\\real-academy\\real-academy-frontend\\src\\components\\VideoBackground.vue"],"sourcesContent":["<template>\r\n  <section class=\"video-background\" id=\"home\">\r\n    <video\r\n      v-for=\"(video, index) in videoUrls\"\r\n      :key=\"index\"\r\n      v-show=\"currentIndex === index\"\r\n      autoplay\r\n      muted\r\n      loop\r\n      class=\"background-video\"\r\n      @loadeddata=\"onVideoLoaded\"\r\n      @ended=\"onVideoEnded\"\r\n    >\r\n      <source :src=\"video\" type=\"video/mp4\" />\r\n      Your browser does not support the video tag.\r\n    </video>\r\n    <div class=\"overlay\">\r\n      <img src=\"/assets/logos/logo-en-blanco.png\" class=\"logo\" alt=\"Logo\" />\r\n      <h1>BIENVENIDOS a REAL ACADEMY FC</h1>\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'VideoBackground',\r\n  data() {\r\n    return {\r\n      videoUrls: [],\r\n      currentIndex: 0,\r\n      videoDuration: 10, // Duración en segundos de cada video\r\n    };\r\n  },\r\n  async created() {\r\n    this.videoUrls = await this.fetchVideoUrls();\r\n    this.startVideoCycle();\r\n  },\r\n  methods: {\r\n    async fetchVideoUrls() {\r\n      const totalVideos = 6; // Cambia esto según la cantidad de videos\r\n      return Array.from({ length: totalVideos }, (_, i) => `/assets/videos/video-${i + 1}.mp4`);\r\n    },\r\n    startVideoCycle() {\r\n      setInterval(() => {\r\n        this.currentIndex = (this.currentIndex + 1) % this.videoUrls.length;\r\n      }, this.videoDuration * 1000); // Cambia el video cada 10 segundos\r\n    },\r\n    onVideoEnded() {\r\n      // Cuando el video termina, se libera la memoria del video actual\r\n      const currentVideo = this.$refs.video[this.currentIndex];\r\n      if (currentVideo) {\r\n        currentVideo.pause(); // Pausa el video actual\r\n        currentVideo.currentTime = 0; // Reinicia el tiempo de reproducción\r\n      }\r\n    },\r\n    onVideoLoaded() {\r\n      // Esta función se ejecuta cuando un video ha terminado de cargar\r\n      // Puedes implementar aquí lógica adicional si es necesario\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.video-background {\r\n  position: relative;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n}\r\n\r\n.background-video {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  transition: opacity 1s ease;\r\n  filter: sepia(1); /* Aplica filtro sepia al video */\r\n}\r\n\r\n.overlay {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  pointer-events: none;\r\n}\r\n\r\n.logo {\r\n  max-width: 30%;\r\n  min-width: 250px;\r\n  opacity: 0.5;\r\n  margin-bottom: 20px;\r\n}\r\n\r\nh1 {\r\n  font-size: 4em;\r\n  color: transparent;\r\n  opacity: 0.8;\r\n  -webkit-text-stroke: 0.3px rgba(255, 255, 255, 0.5);\r\n  text-align: center;\r\n  pointer-events: none;\r\n}\r\n</style>\r\n"],"mappings":"AAwBA,eAAe;EACbA,IAAI,EAAE,iBAAiB;EACvBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,YAAY,EAAE,CAAC;MACfC,aAAa,EAAE,EAAE,CAAE;IACrB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI,CAACH,SAAQ,GAAI,MAAM,IAAI,CAACI,cAAc,CAAC,CAAC;IAC5C,IAAI,CAACC,eAAe,CAAC,CAAC;EACxB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMF,cAAcA,CAAA,EAAG;MACrB,MAAMG,WAAU,GAAI,CAAC,EAAE;MACvB,OAAOC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAEH;MAAY,CAAC,EAAE,CAACI,CAAC,EAAEC,CAAC,KAAK,wBAAwBA,CAAA,GAAI,CAAC,MAAM,CAAC;IAC3F,CAAC;IACDP,eAAeA,CAAA,EAAG;MAChBQ,WAAW,CAAC,MAAM;QAChB,IAAI,CAACZ,YAAW,GAAI,CAAC,IAAI,CAACA,YAAW,GAAI,CAAC,IAAI,IAAI,CAACD,SAAS,CAACU,MAAM;MACrE,CAAC,EAAE,IAAI,CAACR,aAAY,GAAI,IAAI,CAAC,EAAE;IACjC,CAAC;IACDY,YAAYA,CAAA,EAAG;MACb;MACA,MAAMC,YAAW,GAAI,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC,IAAI,CAAChB,YAAY,CAAC;MACxD,IAAIc,YAAY,EAAE;QAChBA,YAAY,CAACG,KAAK,CAAC,CAAC,EAAE;QACtBH,YAAY,CAACI,WAAU,GAAI,CAAC,EAAE;MAChC;IACF,CAAC;IACDC,aAAaA,CAAA,EAAG;MACd;MACA;IAAA;EAEJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}