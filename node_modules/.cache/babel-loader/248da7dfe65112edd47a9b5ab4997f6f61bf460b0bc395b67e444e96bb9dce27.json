{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, renderSlot as _renderSlot, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"vue-map-hidden\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([\"vue-map-container\", _ctx.$attrs.class])\n  }, [_createElementVNode(\"div\", {\n    ref: \"vue-map\",\n    class: \"vue-map\",\n    style: _normalizeStyle(_ctx.$attrs.style ? _ctx.$attrs.style : '')\n  }, null, 4), _createElementVNode(\"div\", _hoisted_1, [_renderSlot(_ctx.$slots, \"default\")]), _renderSlot(_ctx.$slots, \"visible\")], 2);\n}","map":{"version":3,"names":["class","_createElementBlock","_normalizeClass","_ctx","$attrs","_createElementVNode","ref","style","_normalizeStyle","_hoisted_1","_renderSlot","$slots"],"sources":["C:\\Users\\DIVDOC-INTERNET\\Desktop\\real-academy\\real-academy-frontend\\node_modules\\@fawmi\\vue-google-maps\\src\\components\\map.vue"],"sourcesContent":["<template>\r\n  <div class=\"vue-map-container\" :class=\"$attrs.class\">\r\n    <div ref=\"vue-map\" class=\"vue-map\" :style=\"$attrs.style ? $attrs.style : ''\"></div>\r\n    <div class=\"vue-map-hidden\">\r\n      <slot></slot>\r\n    </div>\r\n    <slot name=\"visible\"></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport bindEvents from '../utils/bindEvents.js'\r\nimport { bindProps, getPropsValues } from '../utils/bindProps.js'\r\nimport mountableMixin from '../utils/mountableMixin.js'\r\n\r\nimport TwoWayBindingWrapper from '../utils/TwoWayBindingWrapper.js'\r\nimport WatchPrimitiveProperties from '../utils/WatchPrimitiveProperties.js'\r\nimport { mappedPropsToVueProps } from './build-component.js'\r\n\r\nconst props = {\r\n  center: {\r\n    required: true,\r\n    twoWay: true,\r\n    type: Object,\r\n    noBind: true,\r\n  },\r\n  zoom: {\r\n    required: false,\r\n    twoWay: true,\r\n    type: Number,\r\n    noBind: true,\r\n  },\r\n  heading: {\r\n    type: Number,\r\n    twoWay: true,\r\n  },\r\n  mapTypeId: {\r\n    twoWay: true,\r\n    type: String,\r\n  },\r\n  tilt: {\r\n    twoWay: true,\r\n    type: Number,\r\n  },\r\n  options: {\r\n    type: Object,\r\n    default() {\r\n      return {}\r\n    },\r\n  },\r\n}\r\n\r\nconst events = [\r\n  'bounds_changed',\r\n  'click',\r\n  'dblclick',\r\n  'drag',\r\n  'dragend',\r\n  'dragstart',\r\n  'idle',\r\n  'mousemove',\r\n  'mouseout',\r\n  'mouseover',\r\n  'resize',\r\n  'rightclick',\r\n  'tilesloaded',\r\n]\r\n\r\n// Plain Google Maps methods exposed here for convenience\r\nconst linkedMethods = ['panBy', 'panTo', 'panToBounds', 'fitBounds'].reduce((all, methodName) => {\r\n  all[methodName] = function () {\r\n    if (this.$mapObject) {\r\n      this.$mapObject[methodName].apply(this.$mapObject, arguments)\r\n    }\r\n  }\r\n  return all\r\n}, {})\r\n\r\n// Other convenience methods exposed by Vue Google Maps\r\nconst customMethods = {\r\n  resize() {\r\n    if (this.$mapObject) {\r\n      google.maps.event.trigger(this.$mapObject, 'resize')\r\n    }\r\n  },\r\n  resizePreserveCenter() {\r\n    if (!this.$mapObject) {\r\n      return\r\n    }\r\n\r\n    const oldCenter = this.$mapObject.getCenter()\r\n    google.maps.event.trigger(this.$mapObject, 'resize')\r\n    this.$mapObject.setCenter(oldCenter)\r\n  },\r\n\r\n  /// Override mountableMixin::_resizeCallback\r\n  /// because resizePreserveCenter is usually the\r\n  /// expected behaviour\r\n  _resizeCallback() {\r\n    this.resizePreserveCenter()\r\n  },\r\n}\r\n\r\nexport default {\r\n  mixins: [mountableMixin],\r\n  props: mappedPropsToVueProps({...props, ...events.reduce((obj, eventName) => ({...obj, [`on${eventName.charAt(0).toUpperCase()}${eventName.slice(1)}`.replace(/[-_]+(.)?/g, (_, c) => c ? c.toUpperCase() : '')]: Function}), {}) } ),\r\n  inheritAttrs: false,\r\n\r\n  provide() {\r\n    this.$mapPromise = new Promise((resolve, reject) => {\r\n      this.$mapPromiseDeferred = { resolve, reject }\r\n    })\r\n    return {\r\n      $mapPromise: this.$mapPromise,\r\n    }\r\n  },\r\n  emits: ['center_changed', 'zoom_changed', 'bounds_changed'],\r\n  computed: {\r\n    finalLat() {\r\n      return this.center && typeof this.center.lat === 'function'\r\n        ? this.center.lat()\r\n        : this.center.lat\r\n    },\r\n    finalLng() {\r\n      return this.center && typeof this.center.lng === 'function'\r\n        ? this.center.lng()\r\n        : this.center.lng\r\n    },\r\n    finalLatLng() {\r\n      return { lat: this.finalLat, lng: this.finalLng }\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    zoom(zoom) {\r\n      if (this.$mapObject) {\r\n        this.$mapObject.setZoom(zoom)\r\n      }\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    return this.$gmapApiPromiseLazy()\r\n      .then(() => {\r\n        // getting the DOM element where to create the map\r\n        const element = this.$refs['vue-map']\r\n\r\n        // creating the map\r\n        const options = {\r\n          ...this.options,\r\n          ...getPropsValues(this, props),\r\n        }\r\n        delete options.options\r\n        this.$mapObject = new google.maps.Map(element, options)\r\n\r\n        // binding properties (two and one way)\r\n        bindProps(this, this.$mapObject, props)\r\n        // binding events\r\n        bindEvents(this, this.$mapObject, events)\r\n\r\n        // manually trigger center and zoom\r\n        TwoWayBindingWrapper((increment, decrement, shouldUpdate) => {\r\n          this.$mapObject.addListener('center_changed', () => {\r\n            if (shouldUpdate()) {\r\n              this.$emit('center_changed', this.$mapObject.getCenter())\r\n            }\r\n            decrement()\r\n          })\r\n\r\n          const updateCenter = () => {\r\n            increment()\r\n            this.$mapObject.setCenter(this.finalLatLng)\r\n          }\r\n\r\n          WatchPrimitiveProperties(this, ['finalLat', 'finalLng'], updateCenter)\r\n        })\r\n        this.$mapObject.addListener('zoom_changed', () => {\r\n          this.$emit('zoom_changed', this.$mapObject.getZoom())\r\n        })\r\n        this.$mapObject.addListener('bounds_changed', () => {\r\n          this.$emit('bounds_changed', this.$mapObject.getBounds())\r\n        })\r\n\r\n        this.$mapPromiseDeferred.resolve(this.$mapObject)\r\n\r\n        return this.$mapObject\r\n      })\r\n      .catch((error) => {\r\n        throw error\r\n      })\r\n  },\r\n  methods: {\r\n    ...customMethods,\r\n    ...linkedMethods,\r\n  },\r\n}\r\n</script>\r\n<style>\r\n.vue-map {\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 2rem;\r\n}\r\n</style>\r\n"],"mappings":";;EAGSA,KAAK,EAAC;AAAgB;;uBAF7BC,mBAAA,CAMM;IANDD,KAAK,EADZE,eAAA,EACa,mBAAmB,EAASC,IAAA,CAAAC,MAAM,CAACJ,KAAK;MACjDK,mBAAA,CAAmF;IAA9EC,GAAG,EAAC,SAAS;IAACN,KAAK,EAAC,SAAS;IAAEO,KAAK,EAF7CC,eAAA,CAE+CL,IAAA,CAAAC,MAAM,CAACG,KAAK,GAAGJ,IAAA,CAAAC,MAAM,CAACG,KAAK;eACtEF,mBAAA,CAEM,OAFNI,UAEM,GADJC,WAAA,CAAaP,IAAA,CAAAQ,MAAA,a,GAEfD,WAAA,CAA4BP,IAAA,CAAAQ,MAAA,a","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}