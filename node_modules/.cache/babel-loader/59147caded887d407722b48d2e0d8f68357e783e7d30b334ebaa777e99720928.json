{"ast":null,"code":"import { MarkerClusterer } from \"@googlemaps/markerclusterer\";\nimport buildComponent from './build-component.js';\nconst props = {\n  maxZoom: {\n    type: Number,\n    twoWay: false\n  },\n  batchSizeIE: {\n    type: Number,\n    twoWay: false\n  },\n  calculator: {\n    type: Function,\n    twoWay: false\n  },\n  enableRetinaIcons: {\n    type: Boolean,\n    twoWay: false\n  },\n  gridSize: {\n    type: Number,\n    twoWay: false\n  },\n  ignoreHidden: {\n    type: Boolean,\n    twoWay: false\n  },\n  imageExtension: {\n    type: String,\n    twoWay: false\n  },\n  imagePath: {\n    type: String,\n    twoWay: false\n  },\n  imageSizes: {\n    type: Array,\n    twoWay: false\n  },\n  minimumClusterSize: {\n    type: Number,\n    twoWay: false\n  },\n  styles: {\n    type: Array,\n    twoWay: false\n  },\n  zoomOnClick: {\n    type: Boolean,\n    twoWay: false\n  }\n};\nconst events = ['click', 'rightclick', 'dblclick', 'drag', 'dragstart', 'dragend', 'mouseup', 'mousedown', 'mouseover', 'mouseout'];\nexport default buildComponent({\n  mappedProps: props,\n  events,\n  name: 'cluster',\n  ctr: () => {\n    if (typeof MarkerClusterer === 'undefined') {\n      const errorMessage = 'MarkerClusterer is not installed!';\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    return MarkerClusterer;\n  },\n  ctrArgs: ({\n    map,\n    ...otherOptions\n  }) => [map, [], otherOptions],\n  afterCreate(inst) {\n    const reinsertMarkers = () => {\n      const oldMarkers = inst.getMarkers();\n      inst.clearMarkers();\n      inst.addMarkers(oldMarkers);\n    };\n    for (let prop in props) {\n      if (props[prop].twoWay) {\n        this.$on(prop.toLowerCase() + '_changed', reinsertMarkers);\n      }\n    }\n  },\n  updated() {\n    if (this.$clusterObject) {\n      this.$clusterObject.repaint();\n    }\n  },\n  beforeUnmount() {\n    /* Performance optimization when destroying a large number of markers */\n    if (this.$children && this.$children.length) {\n      this.$children.forEach(marker => {\n        if (marker.$clusterObject === this.$clusterObject) {\n          marker.$clusterObject = null;\n        }\n      });\n    }\n    if (this.$clusterObject) {\n      this.$clusterObject.clearMarkers();\n    }\n  }\n});","map":{"version":3,"names":["MarkerClusterer","buildComponent","props","maxZoom","type","Number","twoWay","batchSizeIE","calculator","Function","enableRetinaIcons","Boolean","gridSize","ignoreHidden","imageExtension","String","imagePath","imageSizes","Array","minimumClusterSize","styles","zoomOnClick","events","mappedProps","name","ctr","errorMessage","console","error","Error","ctrArgs","map","otherOptions","afterCreate","inst","reinsertMarkers","oldMarkers","getMarkers","clearMarkers","addMarkers","prop","$on","toLowerCase","updated","$clusterObject","repaint","beforeUnmount","$children","length","forEach","marker"],"sources":["C:\\Users\\DIVDOC-INTERNET\\Desktop\\real-academy\\real-academy-frontend\\node_modules\\@fawmi\\vue-google-maps\\src\\components\\cluster.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { MarkerClusterer } from \"@googlemaps/markerclusterer\";\r\nimport buildComponent from './build-component.js'\r\n\r\nconst props = {\r\n  maxZoom: {\r\n    type: Number,\r\n    twoWay: false,\r\n  },\r\n  batchSizeIE: {\r\n    type: Number,\r\n    twoWay: false,\r\n  },\r\n  calculator: {\r\n    type: Function,\r\n    twoWay: false,\r\n  },\r\n  enableRetinaIcons: {\r\n    type: Boolean,\r\n    twoWay: false,\r\n  },\r\n  gridSize: {\r\n    type: Number,\r\n    twoWay: false,\r\n  },\r\n  ignoreHidden: {\r\n    type: Boolean,\r\n    twoWay: false,\r\n  },\r\n  imageExtension: {\r\n    type: String,\r\n    twoWay: false,\r\n  },\r\n  imagePath: {\r\n    type: String,\r\n    twoWay: false,\r\n  },\r\n  imageSizes: {\r\n    type: Array,\r\n    twoWay: false,\r\n  },\r\n  minimumClusterSize: {\r\n    type: Number,\r\n    twoWay: false,\r\n  },\r\n  styles: {\r\n    type: Array,\r\n    twoWay: false,\r\n  },\r\n  zoomOnClick: {\r\n    type: Boolean,\r\n    twoWay: false,\r\n  },\r\n}\r\n\r\nconst events = [\r\n  'click',\r\n  'rightclick',\r\n  'dblclick',\r\n  'drag',\r\n  'dragstart',\r\n  'dragend',\r\n  'mouseup',\r\n  'mousedown',\r\n  'mouseover',\r\n  'mouseout',\r\n]\r\n\r\nexport default buildComponent({\r\n  mappedProps: props,\r\n  events,\r\n  name: 'cluster',\r\n  ctr: () => {\r\n    if (typeof MarkerClusterer === 'undefined') {\r\n      const errorMessage = 'MarkerClusterer is not installed!';\r\n      console.error(errorMessage);\r\n      throw new Error(errorMessage)\r\n    }\r\n    return MarkerClusterer\r\n  },\r\n  ctrArgs: ({ map, ...otherOptions }) => [map, [], otherOptions],\r\n  afterCreate(inst) {\r\n    const reinsertMarkers = () => {\r\n      const oldMarkers = inst.getMarkers()\r\n      inst.clearMarkers()\r\n      inst.addMarkers(oldMarkers)\r\n    }\r\n    for (let prop in props) {\r\n      if (props[prop].twoWay) {\r\n        this.$on(prop.toLowerCase() + '_changed', reinsertMarkers)\r\n      }\r\n    }\r\n  },\r\n  updated() {\r\n    if (this.$clusterObject) {\r\n      this.$clusterObject.repaint()\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    /* Performance optimization when destroying a large number of markers */\r\n    if (this.$children && this.$children.length) {\r\n      this.$children.forEach((marker) => {\r\n        if (marker.$clusterObject === this.$clusterObject) {\r\n          marker.$clusterObject = null\r\n        }\r\n      })\r\n    }\r\n\r\n\r\n    if (this.$clusterObject) {\r\n      this.$clusterObject.clearMarkers()\r\n    }\r\n  },\r\n})\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}